{"variables":[],"info":{"name":"Laravel API","_postman_id":"0b5fe818-0e46-4dbb-a833-8f18e87acbec","description":"","schema":"https:\/\/schema.getpostman.com\/json\/collection\/v2.0.0\/collection.json"},"item":[{"name":"Book","description":"","item":[{"name":"Show book","request":{"url":"http:\/\/localhost\/api\/books\/show","method":"GET","body":{"mode":"formdata","formdata":[{"key":"book_id","value":19,"type":"text","enabled":true}]},"description":"","response":[]}},{"name":"List all books","request":{"url":"http:\/\/localhost\/api\/books","method":"GET","body":{"mode":"formdata","formdata":[{"key":"page","value":13,"type":"text","enabled":true},{"key":"books_per_page","value":13,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"Review","description":"","item":[{"name":"List all reviews of the authenticated user","request":{"url":"http:\/\/localhost\/api\/myreviews","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}},{"name":"Recent reviews from all members.","request":{"url":"http:\/\/localhost\/api\/reviwes","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}},{"name":"Get review statistics given a list of ISBNs\ntake alist of books and then return their reviews And Rates\nand i will use it to get the review for one book array of one element","request":{"url":"http:\/\/localhost\/api\/reviwes\/users\/books","method":"GET","body":{"mode":"formdata","formdata":[{"key":"isbns","value":"1dSitIRudiSGNR8Z","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"List the reviews for a specific user","request":{"url":"http:\/\/localhost\/api\/listReviewOfUser","method":"GET","body":{"mode":"formdata","formdata":[{"key":"userId","value":"957PqDoEA4Ip9F87","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"Shelf","description":"","item":[{"name":"List all shelves of the authenticated user .","request":{"url":"http:\/\/localhost\/api\/shlef\/list","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}},{"name":"Show a shelf","request":{"url":"http:\/\/localhost\/api\/shelf\/shelfname","method":"GET","body":{"mode":"formdata","formdata":[{"key":"shelf_name","value":"pBwLYJHADIRjKda2","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Get User`s shelves","request":{"url":"http:\/\/localhost\/api\/shelf\/shelfid","method":"GET","body":{"mode":"formdata","formdata":[{"key":"user_id","value":19,"type":"text","enabled":true},{"key":"page","value":17,"type":"text","enabled":true},{"key":"books_per_page","value":3,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"User \n\nAPIs for managing users (Sofyan)","description":"","item":[{"name":"Sign Up","request":{"url":"http:\/\/localhost\/api\/signup","method":"POST","body":{"mode":"formdata","formdata":[{"key":"email","value":"dbrSzgHkmdyUwxSg","type":"text","enabled":true},{"key":"password","value":"ayvL5tcQy1C3hKBU","type":"text","enabled":true},{"key":"password_confirmation","value":"LjdMBYmVl7q67hg5","type":"text","enabled":true},{"key":"name","value":"FZ1zfzCcZEmyB7EE","type":"text","enabled":true},{"key":"gender","value":"9jvbfIPqkSwQwSL1","type":"text","enabled":true},{"key":"birthday","value":"wmiZHbsEUKgoA464","type":"text","enabled":true},{"key":"country","value":"m9qX53cXpPS7Y83S","type":"text","enabled":true},{"key":"city","value":"PhLgFY7YsR72HKsT","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Change password","request":{"url":"http:\/\/localhost\/api\/changepassword","method":"POST","body":{"mode":"formdata","formdata":[{"key":"password","value":"q5LU6sJX0COIYTKY","type":"text","enabled":true},{"key":"newPassword","value":"DWrAw3K8ebjJ24QL","type":"text","enabled":true},{"key":"newPassword_confirmation","value":"wPNuUQAp4WifPtSM","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Change Name","request":{"url":"http:\/\/localhost\/api\/changename","method":"POST","body":{"mode":"formdata","formdata":[{"key":"password","value":"r96nx4fqIeHZ0DyC","type":"text","enabled":true},{"key":"newName","value":"4w9jcksLONxrUo4s","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Delete","request":{"url":"http:\/\/localhost\/api\/delete","method":"POST","body":{"mode":"formdata","formdata":[{"key":"password","value":"7Xaph2iE2KGNfoA1","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"show setting","request":{"url":"http:\/\/localhost\/api\/showsetting","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}},{"name":"Change country","request":{"url":"http:\/\/localhost\/api\/changecountry","method":"GET","body":{"mode":"formdata","formdata":[{"key":"country","value":"9SYL5ZOPas6DdZvB","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Change city","request":{"url":"http:\/\/localhost\/api\/changecity","method":"GET","body":{"mode":"formdata","formdata":[{"key":"city","value":"qdkBCIh08NCegNrO","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Change birthday","request":{"url":"http:\/\/localhost\/api\/changebirthday","method":"GET","body":{"mode":"formdata","formdata":[{"key":"birthday","value":"DyzLtSeHyo2YCG06","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Who can see my birthday","request":{"url":"http:\/\/localhost\/api\/whocanseemybirthday","method":"GET","body":{"mode":"formdata","formdata":[{"key":"seeMyBirthday","value":"O27md2pITy2Z8cSI","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Who can see my country","request":{"url":"http:\/\/localhost\/api\/whocanseemycountry","method":"GET","body":{"mode":"formdata","formdata":[{"key":"seeMyCountry","value":"inbLXehQiGCGx9XT","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Who can see my city","request":{"url":"http:\/\/localhost\/api\/whocanseemycity","method":"GET","body":{"mode":"formdata","formdata":[{"key":"seeMyCity","value":"jO8u0WMn5rKNdcDE","type":"text","enabled":true}]},"description":"","response":[]}},{"name":"Change Image","request":{"url":"http:\/\/localhost\/api\/changeImage","method":"POST","body":{"mode":"formdata","formdata":[{"key":"Image","value":"VqrVnGiiCMo180Hb","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Activities].Delete Comment\ndeleteComment function\n\nmake a validation on the input to check that is satisfing the conditions. \n\nif tha input is valid it will continue in the code otherwise it will response with error.\n\ncheck that the authenticated user is  the one who create the comment to allow to him to delete it.\n\ndelete the comment and decrement the number of comments in review or shelf or follow","description":"","item":[{"name":"http:\/\/localhost\/api\/deleteComment","request":{"url":"http:\/\/localhost\/api\/deleteComment","method":"DELETE","body":{"mode":"formdata","formdata":[{"key":"id","value":10,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Activities].Like\nlike function\n\nmake a validation on the input to check that is satisfing the conditions. \n\nif tha input is valid it will continue in the code otherwise it will response with error.\n\nyou can make like on three types only (review,follow,add book to shelf)\n\nthe function check that the like is on one of the three type then make the like\n\nincrement the number of likes in the review or follow or  add to shelf","description":"","item":[{"name":"http:\/\/localhost\/api\/makeLike","request":{"url":"http:\/\/localhost\/api\/makeLike","method":"POST","body":{"mode":"formdata","formdata":[{"key":"id","value":2,"type":"text","enabled":true},{"key":"type","value":13,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Activities].Make Comment\nmakeComment function\n\nmake a validation on the input to check that is satisfing the conditions. \n\nif tha input is valid it will continue in the code otherwise it will response with error.\n\nyou can make comment on three types only (review,follow,add book to shelf)\n\nthe function check that the comment is on one of the three type then make the comment \n\nincrement the number of comments in the review or follow or  add to shelf","description":"","item":[{"name":"http:\/\/localhost\/api\/makeComment","request":{"url":"http:\/\/localhost\/api\/makeComment","method":"POST","body":{"mode":"formdata","formdata":[{"key":"id","value":6,"type":"text","enabled":true},{"key":"type","value":3,"type":"text","enabled":true},{"key":"body","value":"xvjrRYGSkbCc3nF6","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Activities].Unlike\nunLike function\n\nmake a validation on the input to check that is satisfing the conditions. \n\nif tha input is valid it will continue in the code otherwise it will response with error.\n\ncheck that the authenticated user is  the one who make like to allow to him to unlike it.\n\nunlike and decrement the number of likes in review or shelf or follow","description":"","item":[{"name":"http:\/\/localhost\/api\/unlike","request":{"url":"http:\/\/localhost\/api\/unlike","method":"DELETE","body":{"mode":"formdata","formdata":[{"key":"id","value":12,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Activities].Updates\nupdates function\n\nGet user's updates from following users\n\nfirst the function validates the sent parameters if any if it isn't valid \nan error response returns with 400 status code\n\nif there is no parameters sent the default is to return all updates that would be shown to the authenticated user\nget all the users followed by the authenticated user then all the activities made by them\nthose activities are retrieved from five different database tables that store these info \n(shelves,reviews,likes,comments,followings) then the data is merged into one array and sorted \nby updated_at date descendingly in order to show the user the user the latest updates first\n\nif a valid user id is sent then all activities made by this specific user are retrieved the same \nway explained earlier in order to show it in this user's profile\n\nif a valid max updates is sent then this value is retrieved from the array after sorting","description":"","item":[{"name":"http:\/\/localhost\/api\/updates","request":{"url":"http:\/\/localhost\/api\/updates","method":"GET","body":{"mode":"formdata","formdata":[{"key":"user_id","value":6,"type":"text","enabled":true},{"key":"max_updates","value":2,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Following].Follow User\nfollowUser function\n\nChecking the request`s paramaters that has [user_id] paramater\n\nit is aborting in case no user_id is given\n\nValidate the existance of the user_id\nif the user doesn`t exist aborting\n\nValidate the relationship is not existing before.\nresponsing 400 if it exist.\n\nif not exists creating new instance of following model\n\n`\nincreamenting both Follower: follwoing_count \/ Followed: followers_count \n`\n\nResponses with successfully message in case of passing aborting","description":"","item":[{"name":"http:\/\/localhost\/api\/follow","request":{"url":"http:\/\/localhost\/api\/follow","method":"POST","body":{"mode":"formdata","formdata":[{"key":"user_id","value":6,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Following].Followers List\n\nfollowersUser function .\n\n\nreturns followers list of the given [ user_id ] and their currently reading books\n\neach page contains 30 user limiting query with max 30 record.\n\nChecking the request paramaters and validate the existance of the user\n\naborting in-case of user is not exist\n\nother wise returns the user`s followers list from database table .","description":"","item":[{"name":"http:\/\/localhost\/api\/followers","request":{"url":"http:\/\/localhost\/api\/followers","method":"GET","body":{"mode":"formdata","formdata":[{"key":"page","value":14,"type":"text","enabled":true},{"key":"user_id","value":3,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Following].Following List\n\n\nfollowingUser function .\n\nreturns following list of the given [ user_id ] and their currently reading books\n\neach page contains 30 user limiting query with max 30 record.\n\nChecking the request paramaters and validate the existance of the user\n\naborting in-case of user is not exist\n\nother wise returns the user`s following list from database table .","description":"","item":[{"name":"http:\/\/localhost\/api\/following","request":{"url":"http:\/\/localhost\/api\/following","method":"GET","body":{"mode":"formdata","formdata":[{"key":"page","value":10,"type":"text","enabled":true},{"key":"user_id","value":20,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Following].Unfollow User\nunfollowUser function\n\nChecking the request`s paramaters that has [user_id] paramater\n\nit is aborting in case no user_id is given\n\nValidate the existance of the user_id\nif the user doesn`t exist aborting\n\nValidate the relationship is existing .\nif it is not existing it`s aborting .\n\nif exists it is being removes successfully\n\n`\ndecreamenting both Follower: follwoing_count \/ Followed: followers_count \n`\n\nResponses with successfully message in case of passing aborting","description":"","item":[{"name":"http:\/\/localhost\/api\/unfollow","request":{"url":"http:\/\/localhost\/api\/unfollow","method":"DELETE","body":{"mode":"formdata","formdata":[{"key":"user_id","value":18,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].Delete Review\nremoveReview function\n\nmake a validation on the input to check that is satisfing the conditions. \n\nif tha input is valid it will continue in the code otherwise it will response with error.\n\ncheck that the authenticated user is  the one who create the review to allow to him to delete it.\n\n delete the review from the databse \n\n decrement the number of reviews on this book \n\n decrement the number of ratings on this book\n\n modify the avgrating for this book \n\n decrement the number of ratings for the user\n\n modify the avgrating for the user\n\n delete the comment and likes on this review and count them","description":"","item":[{"name":"http:\/\/localhost\/api\/reviwes\/delete","request":{"url":"http:\/\/localhost\/api\/reviwes\/delete","method":"DELETE","body":{"mode":"formdata","formdata":[{"key":"reviewId","value":5,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].Edit Review\neditReview function\n\nmake a validation on the input to check that is satisfing the conditions. \n\nif tha input is valid it will continue in the code otherwise it will response with error.\n\ncheck that the authenticated user is  the one who create the review to allow to him to edit it.\n\nedit the review and rating value.","description":"","item":[{"name":"http:\/\/localhost\/api\/reviwes\/edit","request":{"url":"http:\/\/localhost\/api\/reviwes\/edit","method":"PUT","body":{"mode":"urlencoded","urlencoded":[{"key":"reviewId","value":13,"type":"text","enabled":true},{"key":"body","value":"fVZs8XLDzGL6Ssfy","type":"text","enabled":true},{"key":"rating","value":18,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].Make Review\n createReview function\n\n make a validation on the input to check that is satisfing the conditions \n\n if tha input is valid it will continue in the code otherwise it will response with error\n\n put the book in the shelf_read if it in another shelf or if it wasn't in any shelf \n\n create a new review in the databse \n\n increment the number of reviews on this book \n\n increment the number of ratings on this book\n\n modify the avgrating for this book \n\n increment the number of ratings for the user\n\n modify the avgrating for the user","description":"","item":[{"name":"http:\/\/localhost\/api\/reviwes\/create","request":{"url":"http:\/\/localhost\/api\/reviwes\/create","method":"POST","body":{"mode":"formdata","formdata":[{"key":"bookId","value":17,"type":"text","enabled":true},{"key":"shelf","value":5,"type":"text","enabled":true},{"key":"body","value":"mWlaiXGcsZCscqBV","type":"text","enabled":true},{"key":"rating","value":8,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].get Book By Author Name\n   search about the needed book by its Author name\n\nthis function is responsible for showing certain book by\nreturning the (id,title,publication_date, isbn, image url,publisher,language\n,description,reviews count,rating count,link,author id,genre)\nall of that formed by sending the parameters which :-\nauthor name","description":"","item":[{"name":"http:\/\/localhost\/api\/Books\/book_Authorname","request":{"url":"http:\/\/localhost\/api\/Books\/book_Authorname","method":"GET","body":{"mode":"formdata","formdata":[{"key":"Author_name","value":"bDcmFpOGzL7IyHP5","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].get Book By Isbn\n   get the needed book by its ISBN\n\nthis function is responsible for showing certain book by\nreturning the (id,title,publication_date, isbn, image url,publisher,language,\ndescription,reviews count,rating count,link,author id,genre)\nall of that formed by sending the parameters which :-\nisbn.","description":"","item":[{"name":"http:\/\/localhost\/api\/Books\/book_ISBN","request":{"url":"http:\/\/localhost\/api\/Books\/book_ISBN","method":"GET","body":{"mode":"formdata","formdata":[{"key":"ISBN","value":15,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].get Book By genre\n  Show books by genre\n\nfunction is responsible for showing books by\nreturning the (id,title,publication_date, isbn, image url,publisher,language,\ndescription,reviews count,rating count,link,author id,genre)\nall of that formed by sending the parameters which :-\ngenre type.","description":"","item":[{"name":"http:\/\/localhost\/api\/books\/genre","request":{"url":"http:\/\/localhost\/api\/books\/genre","method":"GET","body":{"mode":"formdata","formdata":[{"key":"genreName","value":"Cjs7ZZOL2jFv2wvL","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].get Book By title\n get the needed book by its name\n\nthis function is responsible for showing certain book by\nreturning the (id,title,publication_date, isbn, image url,publisher,language,\ndescription,reviews count,rating count,link,author id,genre)\nall of that formed by sending the parameters which :-\ntitle.","description":"","item":[{"name":"http:\/\/localhost\/api\/Books\/book_title","request":{"url":"http:\/\/localhost\/api\/Books\/book_title","method":"GET","body":{"mode":"formdata","formdata":[{"key":"title","value":"Hlu3Kt5v2yk2jfWh","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].getReviewsByTitle\n\nGet the reviews for a book given a title string.\nthis function is responsible for showing certain review by\nreturning the (body,rating,comments counts, likes counts, user id ,book id , updates date)\nof a certain review and also it returns the shelf name of the book the review about\nall of that formed by sending the parameters which \ntitle -> required.\nrating ->optional.\nauthor ->optional.","description":"","item":[{"name":"http:\/\/localhost\/api\/reviwes\/books","request":{"url":"http:\/\/localhost\/api\/reviwes\/books","method":"GET","body":{"mode":"formdata","formdata":[{"key":"title","value":"Fp4ok7c4D9hFEld8","type":"text","enabled":true},{"key":"author","value":"rifht7gzgWCOirvh","type":"text","enabled":true},{"key":"rating","value":20,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].show Review For Book For User\n\n\nGet the review for specific user on a specific Book \nthis function is responsible for showing review of a certain user on a certain book by\nreturning the (body,rating) of a certain review and also it returns the shelf name of\nthe book the review about\nall of that formed by sending the parameters which :-\nbook id and\nuser id","description":"","item":[{"name":"http:\/\/localhost\/api\/showReviewForBookForUser","request":{"url":"http:\/\/localhost\/api\/showReviewForBookForUser","method":"GET","body":{"mode":"formdata","formdata":[{"key":"userId","value":"8jOwR48dCAYlWcVO","type":"text","enabled":true},{"key":"bookId","value":"wHEhFMMZ0TkRIvyU","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].show Review For Book\nget a specific review \n\nthis function is responsible for showing details of a certain review by\nreturning the (body,rating,comments counts, likes counts, user id ,book id )\nof a certain review and also it returns the shelf name of the book the review about\nall of that formed by sending the parameters which :-\nreview id.","description":"","item":[{"name":"http:\/\/localhost\/api\/showReviewOfBook","request":{"url":"http:\/\/localhost\/api\/showReviewOfBook","method":"GET","body":{"mode":"formdata","formdata":[{"key":"reviewId","value":"pWsjTDUAWwUKUEWa","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Review].show Reviews For Book\n\nGet the review for specific user on a specific Book\nthis function is responsible for showing review of a certain book by returning the (idmbody,rating,likes count,\ncomments count,user id)\nof a certain review and also it returns the shelf name of the book the review about\nand also the username as well, all of that formed by sending the parameters which :-\nbook id","description":"","item":[{"name":"http:\/\/localhost\/api\/showReviewsForABook","request":{"url":"http:\/\/localhost\/api\/showReviewsForABook","method":"GET","body":{"mode":"formdata","formdata":[{"key":"bookId","value":12,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Shelf].Add Book\naddBook function . \n\nAdd a book to a shelf\n\n\ngiven request paramters (book_id , shelf_id=0)\n\nchecking the existance of the given book on the shelf if it already exists it`s being update\n\nif it`s new entry creating new record and responses successfully add \n\nin-case of the book is already exists and the user trying to add it onto the same shelf\n\nit returnd an error message ( Something gone wrong).","description":"","item":[{"name":"http:\/\/localhost\/api\/shelf\/add_book","request":{"url":"http:\/\/localhost\/api\/shelf\/add_book","method":"POST","body":{"mode":"formdata","formdata":[{"key":"shelf_id","value":4,"type":"text","enabled":true},{"key":"book_id","value":10,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Shelf].Remove Book\nremoveBook function\n\nRemove a book from a shelf\n\nit is required (book_id,shelf_id) in the request\n\nValidate the existance of these paramaters in the request\n\nThen searching for them in the DB . deleting them if exists\n\nreturns successfully removed when it is deleted \n\notherwise it respones with error message .","description":"","item":[{"name":"http:\/\/localhost\/api\/shelf\/remove_book","request":{"url":"http:\/\/localhost\/api\/shelf\/remove_book","method":"DELETE","body":{"mode":"formdata","formdata":[{"key":"shelf_id","value":13,"type":"text","enabled":true},{"key":"book_id","value":5,"type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[Shelf].getBooksOnShelf\nshow books on the shelf\nthis function is responsible for showing books on the user's shelf by\nreturning the (book id,title).\nall of that formed by sending the parameters which :-\nshelf name\nuser id","description":"","item":[{"name":"http:\/\/localhost\/api\/shelf","request":{"url":"http:\/\/localhost\/api\/shelf","method":"GET","body":{"mode":"formdata","formdata":[{"key":"user_id","value":14,"type":"text","enabled":true},{"key":"shelf_name","value":"VNWOUKFs6swqks8H","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[User].Login\nlogIn function\n\nTake the request has [email , password] and check that the email is email type and exists in database and also the password\n\nif all is correct return a response with status 200 and json file has [name , username , image_link] \n\nif there are any errors, return a response with status 405 has the message describe the error","description":"","item":[{"name":"http:\/\/localhost\/api\/login","request":{"url":"http:\/\/localhost\/api\/login","method":"POST","body":{"mode":"formdata","formdata":[{"key":"email","value":"KD96W4UChRNItnVj","type":"text","enabled":true},{"key":"password","value":"KQSvLwllDdwq4kQH","type":"text","enabled":true}]},"description":"","response":[]}}]},{"name":"[User].Logout\nlogOut function\n\nTake the request has [Authorization] in the header and this paramater is checked in middleware \n\nif it valid one the function return it into invalid and return response with status 200 with message [you have logged out]\n\nif this [Authorization] is invalid the middleware return a response with status 405 has a message [UnAuthorized].","description":"","item":[{"name":"http:\/\/localhost\/api\/logout","request":{"url":"http:\/\/localhost\/api\/logout","method":"DELETE","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}}]},{"name":"general","description":"","item":[{"name":"Login using the given user ID \/ email.","request":{"url":"http:\/\/localhost\/_dusk\/login\/{userId}\/{guard?}","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}},{"name":"Log the user out of the application.","request":{"url":"http:\/\/localhost\/_dusk\/logout\/{guard?}","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}},{"name":"Retrieve the authenticated user identifier and class name.","request":{"url":"http:\/\/localhost\/_dusk\/user\/{guard?}","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"","response":[]}}]}]}